nameOverride: ""
fullnameOverride: ""

global:

  #
  image:
    repository: "ghcr.io/sebastocorp/bot"
    tag: ""
    # Overrides the default Image Pull Policy
    pullPolicy: IfNotPresent

  # Image pull secret to use for registry authentication.
  # Alternatively, the value may be specified as an array of strings.
  imagePullSecrets: []
  # imagePullSecrets:
  #   - name: image-pull-secret

bot:
  enabled: true

  replicas: 3

  # Configure the Update Strategy Type for the Deployment
  # See https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.26/#deploymentstrategy-v1-apps
  deploymentStrategy: {}

  resources: {}
  # resources:
  #   requests:
  #     memory: 256Mi
  #     cpu: 250m
  #   limits:
  #     memory: 256Mi
  #     cpu: 250m

  # hostAliases is a list of aliases to be added to /etc/hosts. Specified as a YAML list.
  hostAliases: []
  # - ip: 127.0.0.1
  #   hostnames:
  #     - chart-example.local

  # extraInitContainers is a list of init containers. Specified as a YAML list.
  # This is useful if you need to run a script to provision TLS certificates or
  # write out configuration files in a dynamic way.
  extraInitContainers: null
    # # This example installs a plugin pulled from github into the /usr/local/libexec/vault/oauthapp folder,
    # # which is defined in the volumes value.
    # - name: oauthapp
    #   image: "alpine"
    #   command: [sh, -c]
    #   args:
    #     - cd /tmp &&
    #       wget https://github.com/puppetlabs/vault-plugin-secrets-oauthapp/releases/download/v1.2.0/vault-plugin-secrets-oauthapp-v1.2.0-linux-amd64.tar.xz -O oauthapp.xz &&
    #       tar -xf oauthapp.xz &&
    #       mv vault-plugin-secrets-oauthapp-v1.2.0-linux-amd64 /usr/local/libexec/vault/oauthapp &&
    #       chmod +x /usr/local/libexec/vault/oauthapp
    #   volumeMounts:
    #     - name: plugins
    #       mountPath: /usr/local/libexec/vault

  # TODO
  securityContext: {}
  podSecurityContext: {}

  # extraContainers is a list of sidecar containers. Specified as a YAML list.
  extraContainers: null

  # extraArgs is a string containing additional Envoy server arguments.
  extraArgs:
    - --log-level=info

  # TODO: REVIEW
  # extraPorts is a list of extra ports. Specified as a YAML list.
  # This is useful if you need to add additional ports to the deployment in dynamic way.
  extraPorts: null
    # - containerPort: 8300
    #   name: http-monitoring

  # Used to define custom readinessProbe settings
  # Ref: https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.29/#probe-v1-core
  readinessProbe: {}

  # Used to enable a livenessProbe for the pods
  # Ref: https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.29/#probe-v1-core
  livenessProbe: {}

  # Optional parameters to TODO
  # See: https://kubernetes.io/docs/concepts/containers/container-lifecycle-hooks/
  lifecycle: {}

  # env and extraEnv is a list of extra environment variables to set with the stateful set. These could be
  # used to include variables required for auto-unseal.
  env:
    - name: BOT_SERVER_NAME
      valueFrom:
        fieldRef:
          fieldPath: metadata.name
    - name: BOT_SERVER_ADDRESS
      valueFrom:
        fieldRef:
          fieldPath: status.podIP
    - name: BOT_SERVER_PORT
      value: "8080"
    - name: GIN_MODE
      value: "release"
  extraEnv: []
    # - name: BOT_SERVER_S3_ENDPOINT
    #   value: "s3_endpoint.net"
    # - name: BOT_SERVER_S3_ACCESS_KEY
    #   value: "access_key_id"
    # - name: BOT_SERVER_S3_SECRET_ACCESS_KEY
    #   value: "secret_access_key"
    # - name: BOT_SERVER_GCS_CREDENTIALS_FILE
    #   value: "/config/application_default_credentials.json"
    # - name: BOT_SERVER_DB_HOST
    #   value: "db_host"
    # - name: BOT_SERVER_DB_PORT
    #   value: "db_port"
    # - name: BOT_SERVER_DB_USER
    #   value: "db_user"
    # - name: BOT_SERVER_DB_PASS
    #   value: "db_pass"
    # - name: BOT_SERVER_DB_DATABASE
    #   value: "db_name"
    # - name: BOT_SERVER_DB_TABLE
    #   value: "db_table"

  # extraEnvFrom is a list of extra environment variables coming from external sources.
  # Ref: https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.26/#envfromsource-v1-core
  extraEnvFrom: []

  # volumes is a list of volumes made available to all containers. These are rendered
  # via toYaml rather than pre-processed like the extraVolumes value.
  # The purpose is to make it easy to share volumes between containers.
  volumes: {}
  #   - name: plugins
  #     emptyDir: {}

  # volumeMounts is a list of volumeMounts for the main server container. These are rendered
  # via toYaml rather than pre-processed like the extraVolumes value.
  # The purpose is to make it easy to share volumes between containers.
  volumeMounts: {}
  #   - mountPath: /usr/local/libexec/vault
  #     name: plugins
  #     readOnly: true

  # Affinity Settings
  # Commenting out or setting as empty the affinity variable, will allow
  # deployment to single node services such as Minikube
  # This should be either a multi-line string or YAML matching the PodSpec's affinity field.
  affinity: {}
    # podAntiAffinity:
    #   requiredDuringSchedulingIgnoredDuringExecution:
    #     - labelSelector:
    #         matchLabels:
    #           app.kubernetes.io/name: "bot"
    #           app.kubernetes.io/instance: "bot"
    #           component: bot
    #       topologyKey: kubernetes.io/hostname

  # Topology settings for server pods
  # ref: https://kubernetes.io/docs/concepts/workloads/pods/pod-topology-spread-constraints/
  # This should be either a multi-line string or YAML matching the topologySpreadConstraints array
  # in a PodSpec.
  topologySpreadConstraints: []

  # Toleration Settings for server pods
  # This should be either a multi-line string or YAML matching the Toleration array
  # in a PodSpec.
  tolerations: []

  # nodeSelector labels for server pod assignment, formatted as a multi-line string or YAML map.
  # ref: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/#nodeselector
  # Example:
  # nodeSelector:
  #   beta.kubernetes.io/arch: amd64
  nodeSelector: {}

  # Priority class for server pods
  priorityClassName: ""

  # Extra labels to attach to the server pods
  # This should be a YAML map of the labels to apply to the server pods
  extraLabels: {}

  # Extra annotations to attach to the server pods
  # This can either be YAML or a YAML-formatted multi-line templated string map
  # of the annotations to apply to the server pods
  annotations: {}

  # Should the server pods run on the host network
  hostNetwork: false

  # Pod Disruption Budget configurations
  disruption:
    annotations: {}
    minAvailable: 2
    #maxUnavailable: 1

  # Horizontal Pod Autoscaling configurations
  autoscaling:
    annotations: {}
    minReplicas: 1
    maxReplicas: 5

    targetCPUUtilizationPercentage: 80
    # targetMemoryUtilizationPercentage: 80

    ## see https://kubernetes.io/docs/tasks/run-application/horizontal-pod-autoscale-walkthrough/#autoscaling-on-multiple-metrics-and-custom-metrics
    customRules: []

    ## see https://kubernetes.io/docs/tasks/run-application/horizontal-pod-autoscale/#support-for-configurable-scaling-behavior
    behavior: {}

  # Enables a headless service to be used by the Envoy Statefulset
  service:
    enabled: true
    # clusterIP controls whether a Cluster IP address is attached to the
    # Envoy service within Kubernetes.  By default, the Envoy service will
    # be given a Cluster IP address, set to None to disable.  When disabled
    # Kubernetes will create a "headless" service.  Headless services can be
    # used to communicate with pods directly through DNS instead of a round-robin
    # load balancer.
    # clusterIP: None

    # Configures the service type for the main Envoy service.  Can be ClusterIP
    # or NodePort.
    type: ClusterIP

    # The IP family and IP families options are to set the behaviour in a dual-stack environment.
    # Omitting these values will let the service fall back to whatever the CNI dictates the defaults
    # should be.
    # These are only supported for kubernetes versions >=1.23.0
    #
    # Configures the service's supported IP family policy, can be either:
    #     SingleStack: Single-stack service. The control plane allocates a cluster IP for the Service, using the first configured service cluster IP range.
    #     PreferDualStack: Allocates IPv4 and IPv6 cluster IPs for the Service.
    #     RequireDualStack: Allocates Service .spec.ClusterIPs from both IPv4 and IPv6 address ranges.
    ipFamilyPolicy: ""

    # Sets the families that should be supported and the order in which they should be applied to ClusterIP as well.
    # Can be IPv4 and/or IPv6.
    ipFamilies: []

    # Do not wait for pods to be ready before including them in the services'
    # targets.
    publishNotReadyAddresses: true

    # The externalTrafficPolicy can be set to either Cluster or Local
    # and is only valid for LoadBalancer and NodePort service types.
    # The default value is Cluster.
    # ref: https://kubernetes.io/docs/concepts/services-networking/service/#external-traffic-policy
    #externalTrafficPolicy: Cluster

    # If type is set to "NodePort", a specific nodePort value can be configured,
    # will be random if left blank.
    # nodePort: 30000

    ports:
      - name: api
        port: 8080
        targetPort: 8080

    # Extra annotations for the service definition. This can either be YAML or a
    # YAML-formatted multi-line templated string map of the annotations to apply
    # to the service.
    annotations: {}

  # Note: Configuration files are stored in ConfigMaps so sensitive data
  # such as passwords should be either mounted through extraSecretEnvironmentVars
  # or through a Kube secret.
  config: |
    transferService:
      host: "http://example.com"
      port: "8080"
      endpoint: "/transfer"
    osConfig:
      s3:
        endpoint: $OSPROXY_S3_ENDPOINT
        accessKeyId: $OSPROXY_S3_ACCESS_KEY_ID
        secretAccessKey: $OSPROXY_S3_SECRET_ACCESS_KEY
    relation:
      type: pathPrefix # pathPrefix|host
      buckets:
        "path/prefix/":
          frontend:
            bucketName: front-bucket-name
            removePathPrefix: "path/to/remove/"
          backend:
            bucketName: backend-bucket-name

  # Definition of the serviceAccount used to run Envoy.
  # These options are also used when using an external Envoy server to validate
  # Kubernetes tokens.
  serviceAccount:
    # Specifies whether a service account should be created
    create: true
    # The name of the service account to use.
    # If not set and create is true, a name is generated using the fullname template
    name: ""

    # Extra annotations for the serviceAccount definition. This can either be
    # YAML or a YAML-formatted multi-line templated string map of the
    # annotations to apply to the serviceAccount.
    annotations: {}
    # Extra labels to attach to the serviceAccount
    # This should be a YAML map of the labels to apply to the serviceAccount
    extraLabels: {}

  # Definition on an extra Role resource that can be created.
  # This is intended to handle situations where some sidecar needs to restart bot from outside, etc.
  extraRole:
    create: false
    rules: []

  # Configuration for monitoring the Envoy server.
  monitoring:
    serviceMonitor:
      # The Prometheus operator *must* be installed before enabling this feature,
      # if not the chart will fail to install due to missing CustomResourceDefinitions
      # provided by the operator.
      #
      # Instructions on how to install the Helm chart can be found here:
      #  https://github.com/prometheus-community/helm-charts/tree/main/charts/kube-prometheus-stack
      # More information can be found here:
      #  https://github.com/prometheus-operator/prometheus-operator
      #  https://github.com/prometheus-operator/kube-prometheus

      # Enable deployment of the Envoy Server ServiceMonitor CustomResource.
      enabled: false

      # Selector labels to add to the ServiceMonitor.
      # When empty, defaults to:
      #  release: prometheus
      selectors: { }

      # Interval at which Prometheus scrapes metrics
      interval: 30s

      # Timeout for Prometheus scrapes
      scrapeTimeout: 10s

    prometheusRules:
      # The Prometheus operator *must* be installed before enabling this feature,
      # if not the chart will fail to install due to missing CustomResourceDefinitions
      # provided by the operator.

      # Deploy the PrometheusRule custom resource for AlertManager based alerts.
      # Requires that AlertManager is properly deployed.
      enabled: false

      # Selector labels to add to the PrometheusRules.
      # When empty, defaults to:
      #  release: prometheus
      selectors: {}

      # Some example rules.
      rules: []
      #  - alert: vault-HighResponseTime
      #    annotations:
      #      message: The response time of Envoy is over 500ms on average over the last 5 minutes.
      #    expr: vault_core_handle_request{quantile="0.5", namespace="mynamespace"} > 500
      #    for: 5m
      #    labels:
      #      severity: warning
      #  - alert: vault-HighResponseTime
      #    annotations:
      #      message: The response time of Envoy is over 1s on average over the last 5 minutes.
      #    expr: vault_core_handle_request{quantile="0.5", namespace="mynamespace"} > 1000
      #    for: 5m
      #    labels:
      #      severity: critical


# Define some extra resources to be created
# This section is useful when you need ExternalResource or Secrets, etc.
extraResources: []
  # - apiVersion: v1
  #   kind: Secret
  #   metadata:
  #     name: example-secret
  #     labels: {}
  #   type: Opaque
  #   stringData:
  #     username: admin
  #     password: mypassword